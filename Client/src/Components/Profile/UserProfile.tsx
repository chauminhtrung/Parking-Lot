import { useEffect, useState, useRef } from "react";
import { Tooltip } from "react-tooltip";
import { useNavigate, useParams } from "react-router-dom";
import parkingLotApi from "../../Api/parkingLotApi";
import type {ParkingLot  } from "../../Api/parkingLotApi";
import toast from "react-hot-toast";
import type { User } from "../../Types/User";
import parkingAreaApi from "../../Api/parkingAreaApi";
import parkingSpotApi from "../../Api/parkingSpotApi";
import floorApi  from "../../Api/parkingFloorApi";

interface UserProfileProps {
  user: User | null;
  setUser: React.Dispatch<React.SetStateAction<User | null>>;
}

export default function UserProfile({ user, setUser }: UserProfileProps) {
  const [showLogout, setShowLogout] = useState(false);
  const [showModal, setShowModal] = useState(false);
  const [showAddForm, setShowAddForm] = useState(false); // üü¢ Th√™m d√≤ng n√†y
  const [name, setName] = useState("");
  const [address, setAddress] = useState("");
  const [floors, setFloors] = useState(0);
  const [description, setDescription] = useState("");
  const navigate = useNavigate();
  const [lots, setLots] = useState<ParkingLot[]>([]);
  const [selectedLotId, setSelectedLotId] = useState<number | null>(null);
  const manageLotModalRef = useRef<HTMLDivElement>(null);
  const addLotModalRef = useRef<HTMLDivElement>(null);
    const [selectedFloor, setSelectedFloor] = useState<number | null>(null);
const [floorAreas, setFloorAreas] = useState<{
  [floorNumber: number]: { count: number; areas: any[] };
}>({});
  const [areas, setAreas] = useState([
  { areaName: "", description: "", spotCount: 0 },
]);
  const { lotId } = useParams<{ lotId: string }>();


  const handleLogout = () => {
    toast.success("üéâ ƒêƒÉng xu·∫•t th√†nh c√¥ng!");
    localStorage.removeItem("user");
    setTimeout(() => navigate("/login"), 1000);
  };

  // üü¢ Fetch danh s√°ch b√£i ƒë·ªó xe
useEffect(() => {
  if (!user) return; // user ch∆∞a c√≥ ‚Üí kh√¥ng fetch

  const fetchLots = async () => {
    try {
      const data = await parkingLotApi.getParkingLotByAccountId(user.accountId);
      setLots(Array.isArray(data) ? data : [data]); // ƒê·∫£m b·∫£o l√† m·∫£ng
    } catch (err) {
      console.error("L·ªói khi l·∫•y b√£i ƒë·ªó:", err);
    }
  };

  fetchLots();
}, [user]);

  // üî¥ X√≥a b√£i ƒë·ªó
const handleDelete = (lotId: number) => {
  // Hi·ªÉn th·ªã toast x√°c nh·∫≠n
  toast.custom((t) => (
    <div className="bg-white p-4 rounded-lg shadow-lg border border-gray-200">
      <p className="text-gray-800 mb-3">B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a b√£i ƒë·ªó n√†y?</p>
      <div className="flex justify-end gap-2">
        <button
          onClick={async () => {
            toast.dismiss(t.id); // ·∫©n toast tr∆∞·ªõc
            try {
              await parkingLotApi.deleteParkingLot(lotId);
              setLots((prev) => prev.filter((lot) => lot.lotId !== lotId));
              toast.success("X√≥a th√†nh c√¥ng!");
            } catch (err) {
              console.error("L·ªói khi x√≥a:", err);
              toast.error("X√≥a th·∫•t b·∫°i!");
            }
          }}
          className="px-3 py-1 bg-gradient-to-r from-[#a9a4eb] to-[#6A63F0] text-white rounded hover:bg-red-600"
        >
          ƒê·ªìng √Ω
        </button>
        <button
          onClick={() => toast.dismiss(t.id)}
          className="px-3 py-1 bg-gray-200 text-gray-700 rounded hover:bg-gray-300"
        >
          H·ªßy
        </button>
      </div>
    </div>
  ));
};

const handleCreateParkingLot = async () => {
  try {
    // 1Ô∏è‚É£ Ki·ªÉm tra d·ªØ li·ªáu c∆° b·∫£n
    if (!name.trim() || !address.trim() || !description.trim()) {
      toast.error("‚ùå Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin b√£i xe!");
      return;
    }

    if (floors <= 0) {
      toast.error("‚ö†Ô∏è Vui l√≤ng nh·∫≠p s·ªë t·∫ßng h·ª£p l·ªá!");
      return;
    }

    // 2Ô∏è‚É£ Ki·ªÉm tra t·∫ßng & khu v·ª±c
    const hasValidFloor = Object.values(floorAreas).some(
      (f: any) => f.areas && f.areas.length > 0
    );
    if (!hasValidFloor) {
      toast.error("‚ö†Ô∏è B·∫°n c·∫ßn ch·ªçn √≠t nh·∫•t 1 t·∫ßng v√† th√™m khu v·ª±c cho t·∫ßng ƒë√≥!");
      return;
    }

    // 3Ô∏è‚É£ Ki·ªÉm tra chi ti·∫øt t·ª´ng khu v·ª±c (m√¥ t·∫£ + s·ªë ch·ªó)
    for (const [floorNumber, floorData] of Object.entries(floorAreas)) {
      for (const area of floorData.areas) {
        if (!area.description.trim()) {
          toast.error(`‚ö†Ô∏è Vui l√≤ng nh·∫≠p m√¥ t·∫£ cho khu ${area.areaName} ·ªü t·∫ßng ${floorNumber}!`);
          return;
        }

        if (!area.spotCount) {
          toast.error(`‚ö†Ô∏è Vui l√≤ng ch·ªçn s·ªë ch·ªó cho khu ${area.areaName} ·ªü t·∫ßng ${floorNumber}!`);
          return;
        }
      }
    }

    // 4Ô∏è‚É£ T·∫°o b√£i xe
    const newLot = await parkingLotApi.createParkingLot({
      lotName: name,
      address,
      accountId: user?.accountId,
    });

    const lotId = newLot.lotId;
    if (!lotId) throw new Error("Kh√¥ng l·∫•y ƒë∆∞·ª£c lotId t·ª´ backend");

    // 5Ô∏è‚É£ T·∫°o c√°c t·∫ßng + khu v·ª±c + ch·ªó ƒë·ªó
    for (let i = 1; i <= floors; i++) {
      const floorData = floorAreas[i];
      const newFloor = await floorApi.createFloor({
        lotId,
        floorNumber: i,
        description: `${description} - T·∫ßng ${i}`,
      });

      const floorId = newFloor.floorId;
      if (!floorId || !floorData) continue;

      for (const area of floorData.areas) {
        // üèóÔ∏è T·∫°o khu v·ª±c
        const newArea = await parkingAreaApi.createParkingArea({
          floorId,
          areaName: area.areaName,
          description: `Khu ${area.areaName} - T·∫ßng ${i}: ${area.description}`,
          spotCount: area.spotCount,
        });

        // ‚úÖ T·∫°o ch·ªó ƒë·ªó (Parking Spot) cho t·ª´ng khu
        if (newArea.areaId && area.spotCount > 0) {
          for (let s = 1; s <= area.spotCount; s++) {
            const spotCode = `${area.areaName}${s}`; // v√≠ d·ª•: A1, A2, A3
            await parkingSpotApi.createParkingSpot({
              areaId: newArea.areaId,
              spotCode,
              status: "Empty",
            });
          }
        }
      }
    }

    // 6Ô∏è‚É£ Th√†nh c√¥ng ‚Üí Reset & th√¥ng b√°o
    toast.success(`üéâ T·∫°o b√£i xe "${name}" th√†nh c√¥ng!`);
    if (user) setUser({ ...user });
    navigate(`/${lotId}/home/parkingmap`);

    setShowModal(false);
    setShowAddForm(false);
    setName("");
    setAddress("");
    setFloors(0);
    setDescription("");
    setSelectedFloor(null);
    setFloorAreas({});
    setAreas([{ areaName: "", description: "", spotCount: 0 }]);

  } catch (err: any) {
    toast.error("‚ùå C√≥ l·ªói x·∫£y ra: " + err.message);
    setShowModal(false);
    setShowAddForm(false);
  }
};

  



  if (!user) return null;

  return (
    <>
      <div
        className="absolute bottom-6 left-6 bg-white/90 backdrop-blur-sm rounded-lg p-4 shadow-lg border border-purple-200 cursor-pointer"
        onClick={() => setShowLogout(!showLogout)}
      >
        <div className="flex items-center space-x-3">
          <div className="relative">
            <div className="w-10 h-10 bg-gradient-to-r from-[#503EE1] to-[#6A63F0] rounded-full flex items-center justify-center">
              <span className="text-white font-semibold text-sm">
                {user.username.slice(0, 2).toUpperCase()}
              </span>
            </div>
            <div className="absolute -bottom-1 -right-1 w-4 h-4 bg-green-500 rounded-full border-2 border-white"></div>
          </div>
          <div>
            <p className="font-semibold text-gray-800 text-sm">{user.username}</p>
            <p className="text-gray-600 text-xs">{`${user.username}@gmail.com`}</p>
          </div>
        </div>

        {/* N√∫t Logout */}
        {showLogout && (
          <div className="mt-2 space-y-2">
            <button
              onClick={(e) => {
                e.stopPropagation();
                handleLogout();
              }}
              className="w-full bg-red-500 hover:bg-red-600 text-white text-xs py-1 rounded transition"
            >
              ƒêƒÉng xu·∫•t
            </button>

            {/* üü¢ N√∫t T·ªïng b√£i xe */}
          <button
            onClick={(e) => {
              e.stopPropagation();
              setShowModal(true);
            }}
            className="w-full flex items-center justify-center gap-1 bg-gradient-to-r from-[#6A63F0] to-[#503EE1] hover:opacity-90 text-white text-xs py-1 rounded transition"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="16"
              height="16"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              strokeWidth="2"
              strokeLinecap="round"
              strokeLinejoin="round"
              className="feather feather-plus"
            >
              <line x1="12" y1="5" x2="12" y2="19"></line>
              <line x1="5" y1="12" x2="19" y2="12"></line>
            </svg>
            <span>B√£i xe</span>
          </button>

          </div>
        )}
      </div>

      {/* üü£ Modal hi·ªÉn th·ªã danh s√°ch b√£i xe */}

{showModal && (
  <div
    className="fixed inset-0 bg-black/40 backdrop-blur-sm flex items-center justify-center z-50"
    onClick={() => setShowModal(false)}
  >
    <div
      className="bg-white rounded-xl shadow-lg w-[90%] md:w-[550px] max-h-[85vh] overflow-y-auto p-6 relative"
      onClick={(e) => e.stopPropagation()}
    >
      {/* Header */}
      <div className="flex items-center justify-between border-b pb-3 mb-4">
        <div className="flex items-center gap-3">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            strokeWidth="2"
            strokeLinecap="round"
            strokeLinejoin="round"
            className="text-[#6A63F0]"
          >
            <path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path>
            <polyline points="9 22 9 12 15 12 15 22"></polyline>
          </svg>
          <h2 className="text-lg font-semibold text-gray-800">
            {showAddForm ? "Th√™m b√£i ƒë·ªó xe" : "Danh s√°ch b√£i ƒë·ªó xe"}
          </h2>
        </div>

        <div className="flex items-center gap-3">
          {/* ‚ûï Chuy·ªÉn qua form th√™m */}
          {!showAddForm && (
            <button
              onClick={() => setShowAddForm(true)}
              className="flex items-center gap-1 text-white bg-[#6A63F0] hover:bg-[#4e3de0] px-3 py-1.5 rounded-md text-sm"
            >
              +
              <span>Th√™m</span>
            </button>
          )}

          <button
            onClick={() =>
              showAddForm ? setShowAddForm(false) : setShowModal(false)
            }
            className="text-gray-500 hover:text-gray-700 text-lg"
          >
            ‚úï
          </button>
        </div>
      </div>

      {/* N·ªôi dung */}
      {!showAddForm ? (
        // üü£ DANH S√ÅCH B√ÉI XE
        <div className="space-y-3 max-h-[60vh] overflow-y-auto">
          {lots.length > 0 ? (
            lots.map((lot) => {
              const isActive = String(lot.lotId) === lotId;
              return (
                <div
                  key={lot.lotId}
                  className={`flex items-center justify-between border rounded-lg p-3 transition ${
                    isActive
                      ? "border-[#6A63F0] bg-purple-50 shadow-md"
                      : "border-gray-200 hover:shadow"
                  }`}
                >
                  <div>
                    <h6
                      className={`font-semibold ${
                        isActive ? "text-[#6A63F0]" : "text-gray-800"
                      }`}
                    >
                      B√£i ƒë·ªó: {lot.lotName}
                    </h6>
                    <p className="text-sm text-gray-600">{lot.address}</p>
                  </div>

                  <div className="flex items-center gap-3">
                    {/* ‚ùå X√≥a */}
                    <button
                      onClick={() => {!isActive && handleDelete(lot.lotId!)
                            console.log(lot.lotId);
                            
                      }}
                      
                      disabled={isActive}
                      className={`transition ${
                        isActive
                          ? "text-gray-400 cursor-not-allowed"
                          : "text-red-500 hover:text-red-600"
                      }`}
                      title={
                        isActive
                          ? "Kh√¥ng th·ªÉ x√≥a b√£i ƒëang ƒë∆∞·ª£c qu·∫£n l√Ω"
                          : "X√≥a b√£i ƒë·ªó xe"
                      }
                    >
                   <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="feather feather-trash-2" > <polyline points="3 6 5 6 21 6"></polyline> <path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path> <line x1="10" y1="11" x2="10" y2="17"></line> <line x1="14" y1="11" x2="14" y2="17"></line> </svg>
                    </button>

                    {/* ‚úèÔ∏è S·ª≠a */}
                    <button
                      onClick={() => setSelectedLotId(lot.lotId!)}
                      className="text-blue-500 hover:text-blue-600 transition"
                    >
                     <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="feather feather-edit" > <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path> <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path> </svg>
                    </button>

                    {/* ‚û°Ô∏è Chi ti·∫øt */}
                    <button
                      onClick={() => {
                            setShowModal(false);
                        setShowAddForm(false);
                        navigate(`/${lot.lotId!}/home/parkingmap`)
          
                      }
                      
                      }
                      className={`transition ${
                        isActive
                          ? "text-[#6A63F0]"
                          : "text-green-600 hover:text-green-700"
                      }`}
                    >
                   <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="feather feather-arrow-right" > <line x1="5" y1="12" x2="19" y2="12"></line> <polyline points="12 5 19 12 12 19"></polyline> </svg>
                    </button>
                  </div>
                </div>
              );
            })
          ) : (
            <p className="text-center text-gray-500 italic">
              Ch∆∞a c√≥ b√£i ƒë·ªó n√†o.
            </p>
          )}
        </div>
      ) : (
        // üü¢ FORM TH√äM B√ÉI XE
        <div className="max-h-[65vh] overflow-y-auto px-1">
 <form    className="space-y-4"
    onSubmit={(e) => {
      e.preventDefault(); // ngƒÉn reload
      handleCreateParkingLot();
    }}>
    {/* C√°c input c∆° b·∫£n */}

    <div className="grid grid-cols-2 gap-6">
      {/* T√™n b√£i */}
      <div className="flex flex-col">
        <label className="font-medium mb-1">T√™n b√£i:</label>
        <input
          type="text"
          className="border border-gray-300 rounded-md p-2"
          placeholder="Nh·∫≠p t√™n b√£i"
          required
          value={name}
          onChange={(e) => setName(e.target.value)}
        />
      </div>

      {/* ƒê·ªãa ch·ªâ */}
      <div className="flex flex-col">
        <label className="font-medium mb-1">ƒê·ªãa ch·ªâ:</label>
        <input
          type="text"
          className="border border-gray-300 rounded-md p-2"
          required
          placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ"
          value={address}
          onChange={(e) => setAddress(e.target.value)}
        />
      </div>

      {/* S·ªë t·∫ßng */}
      <div className="flex flex-col">
        <label className="font-medium mb-1">S·ªë t·∫ßng:</label>
        <input
          type="number"
          required
          className="border border-gray-300 rounded-md p-2"
          placeholder="Nh·∫≠p s·ªë t·∫ßng"
          value={floors}
          onChange={(e) => setFloors(Number(e.target.value))}
        />
      </div>

      {/* M√¥ t·∫£ */}
      <div className="flex flex-col">
        <label className="font-medium mb-1">M√¥ t·∫£:</label>
        <input
          type="text"
          required
          className="border border-gray-300 rounded-md p-2"
          placeholder="Nh·∫≠p m√¥ t·∫£"
          value={description}
          onChange={(e) => setDescription(e.target.value)}
        />
      </div>
    </div>

    {/* üß© Nh·∫≠p khu v·ª±c */}
 {/* üß© Qu·∫£n l√Ω khu v·ª±c theo t·∫ßng */}
<div className="border-t pt-4">
  <label className="font-medium mb-2 block">Danh s√°ch t·∫ßng & khu v·ª±c:</label>

  {/* Ch·ªçn t·∫ßng */}
  {floors > 0 ? (
    <div className="space-y-4">
      {/* Danh s√°ch t·∫ßng */}
      <div className="flex flex-wrap gap-2 mb-4">
        {Array.from({ length: floors }, (_, i) => i + 1).map((floor) => (
          <button
            key={floor}
            onClick={() => setSelectedFloor(floor)}
            className={`px-4 py-2 rounded ${
              selectedFloor === floor
                ? "bg-[#6A63F0] text-white"
                : "bg-gray-100 hover:bg-gray-200"
            }`}
          >
            T·∫ßng {floor}
          </button>
        ))}
      </div>

      {/* Khi ch·ªçn 1 t·∫ßng */}
      {selectedFloor && (
        <div>
          <label className="font-medium block mb-2">
            Nh·∫≠p s·ªë l∆∞·ª£ng khu v·ª±c cho t·∫ßng {selectedFloor}:
          </label>

        <select
          
          className="border rounded-md p-2 w-full mb-4"
          value={floorAreas[selectedFloor]?.count || ""}
          onChange={(e) => {
            const count = Number(e.target.value);
            const letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
            const newAreas = Array.from({ length: count }, (_, i) => ({
              areaName: letters[i] || `Area ${i + 1}`,
              description: "",
              spotCount: 0,
            }));
            setFloorAreas({
              ...floorAreas,
              [selectedFloor]: { count, areas: newAreas },
            });
          }}
        >
          <option value="">Ch·ªçn s·ªë khu v·ª±c</option>
          <option value={3}>3</option>
          <option value={6}>6</option>
          <option value={9}>9</option>
        </select>


          {/* Danh s√°ch khu v·ª±c */}
        {floorAreas[selectedFloor]?.areas?.length > 0 && (
          <div className="space-y-2 max-h-[300px] overflow-y-auto pr-2 custom-scrollbar">
            {floorAreas[selectedFloor].areas.map((area, index) => (
              <div
                key={index}
                className="grid grid-cols-3 gap-3 border p-2 rounded-md bg-gray-50"
              >

                  <input
                    type="text"
                    className="border rounded-md p-2 bg-gray-50"
                    value={area.areaName}
                    readOnly
                  />
                  <input
                    type="text"
                    className="border rounded-md p-2"
                    placeholder="M√¥ t·∫£"
                    required
                    value={area.description}
                    onChange={(e) => {
                      const updated = { ...floorAreas };
                      updated[selectedFloor].areas[index].description =
                        e.target.value;
                      setFloorAreas(updated);
                    }}
                  />
                <select
                  className="border rounded-md p-2"
                  value={area.spotCount}
                  onChange={(e) => {
                    const updated = { ...floorAreas };
                    updated[selectedFloor].areas[index].spotCount = Number(e.target.value);
                    setFloorAreas(updated);
                  }}
                >
                  <option value="">Ch·ªçn s·ªë ch·ªó</option>
                  <option value={2}>2</option>
                  <option value={4}>4</option>
                  <option value={6}>6</option>
                  <option value={8}>8</option>
                </select>

                </div>
              ))}
            </div>
          )}
        </div>
      )}
    </div>
  ) : (
    <p className="text-gray-500 italic">Nh·∫≠p s·ªë t·∫ßng ƒë·ªÉ c·∫•u h√¨nh khu v·ª±c.</p>
  )}
</div>


    {/* N√∫t x√°c nh·∫≠n */}
    <button
    type="submit" 
      className="w-full px-4 py-2 bg-gradient-to-r from-[#a9a4eb] to-[#6A63F0] text-white rounded hover:bg-blue-600"
    >
      X√°c nh·∫≠n
    </button>
  </form>
        </div>
      )}
    </div>
  </div>
)}

    </>
  );
}
