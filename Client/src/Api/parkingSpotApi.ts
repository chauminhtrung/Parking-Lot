import axios from "axios";

export interface ParkingSpot {
  spotId?: number;
  areaId: number;
  spotCode: string;
  status?: string;
  [key: string]: any;
}

const BASE_URL = "http://localhost:8080/api/spots";

const parkingSpotApi = {
  // ðŸ”µ Láº¥y táº¥t cáº£ chá»— Ä‘á»—
  getAllParkingSpots: async () =>
    (await axios.get<ParkingSpot[]>(BASE_URL)).data,

  // ðŸŸ£ Láº¥y chá»— Ä‘á»— theo ID
  getParkingSpotById: async (id: number) =>
    (await axios.get<ParkingSpot>(`${BASE_URL}/${id}`)).data,

  // ðŸŸ¢ Láº¥y chá»— Ä‘á»— theo Area ID
  getSpotsByAreaId: async (areaId: number) =>
    (await axios.get<ParkingSpot[]>(`${BASE_URL}/area/${areaId}`)).data,

  // ðŸŸ¢ Táº¡o má»›i chá»— Ä‘á»—
  createParkingSpot: async (data: ParkingSpot) =>
    (await axios.post(BASE_URL, data)).data,

  // ðŸŸ  Cáº­p nháº­t chá»— Ä‘á»—
  updateParkingSpot: async (id: number, data: ParkingSpot) =>
    (await axios.put(`${BASE_URL}/${id}`, data)).data,

  // ðŸ”´ XÃ³a chá»— Ä‘á»—
  deleteParkingSpot: async (id: number) =>
    (await axios.delete(`${BASE_URL}/${id}`)).data,

// ðŸ”µ Cáº­p nháº­t tráº¡ng thÃ¡i chá»— Ä‘á»— theo spotId
updateParkingSpotStatus: async (spotId: number, status: string) =>
  (
    await axios.put(`${BASE_URL}/${spotId}/status`, { status })
  ).data,


};




export default parkingSpotApi;
