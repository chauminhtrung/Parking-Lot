import axios from "axios";

// âœ… Interface dá»±a theo ParkingFloorResponse tá»« backend
export interface ParkingFloor {
  floorId?: number;
  lotId: number;
  floorNumber: number;
  description?: string;
  [key: string]: any;
}

const BASE_URL = "http://localhost:8080/api/floors"; // Ä‘á»•i port náº¿u backend khÃ¡c

const floorApi = {
  // ðŸŸ¢ Táº¡o táº§ng má»›i
  createFloor: async (data: ParkingFloor) => (await axios.post(BASE_URL, data)).data,

  // ðŸ”µ Láº¥y danh sÃ¡ch táº¥t cáº£ táº§ng
  getAllFloors: async () => (await axios.get<ParkingFloor[]>(BASE_URL)).data,

  // ðŸŸ£ Láº¥y táº§ng theo ID
  getFloorById: async (id: number) => (await axios.get<ParkingFloor>(`${BASE_URL}/${id}`)).data,

  // ðŸŸ  Cáº­p nháº­t thÃ´ng tin táº§ng
  updateFloor: async (id: number, data: ParkingFloor) =>
    (await axios.put(`${BASE_URL}/${id}`, data)).data,

  // ðŸ”´ XÃ³a táº§ng
  deleteFloor: async (id: number) => (await axios.delete(`${BASE_URL}/${id}`)).data,

// ðŸŸ¢ Láº¥y danh sÃ¡ch táº§ng theo lotId
getFloorsByLotId: async (lotId: number) =>
  (await axios.get<ParkingFloor[]>(`${BASE_URL}/lot/${lotId}`)).data,

// ðŸŸ¢ Láº¥y táº§ng theo lotId vÃ  floorNumber
getFloorByLotIdAndFloorNumber: async (lotId: number, floorNumber: number) =>
  (await axios.get<ParkingFloor>(`${BASE_URL}/lot/${lotId}/floor/${floorNumber}`)).data,



};

export default floorApi;
